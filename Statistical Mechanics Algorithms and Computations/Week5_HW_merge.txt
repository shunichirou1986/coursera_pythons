import math,os

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z1(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    
def Z2(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

def Z3harm(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    

n_max = 5.0
n_states = 40
cubic = -0.5
quartic = 0.5
beta = 2.0

Energies = [0.5 + i for i in range(n_states)]
grid_x = [i * 0.2 for i in range(-25, 26)]
psi = {}
for x in grid_x:
    psi[x] = [math.exp(-x ** 2 / 2.0) / math.pi ** 0.25] #ground state
    psi[x].append(math.sqrt(2.0) * x * psi[x][0]) #first excited stage
    for n in range(2, n_states): #excited state n>2
        psi[x].append(math.sqrt(2.0 / n) * x * psi[x][n - 1] - math.sqrt((n - 1.0) / n) * psi[x][n - 2])#coding:UTF-8

Names = {}
Names['Albert'] = 'Einstein'
Names['Satyendra'] = 'Bose'
Names['Richard'] = 'Feynman'
Names['Ludwig'] = 'Boltzmann'
L = [1.4,1.5]
print "checkpoint 1"
for name in Names: print name, Names[name]
a = Names.pop('Albert') #popメソッドは指定したキーに該当する要素を削除、値を返す
print "checkpoint 2"
for name in Names: print name, Names[name]
del Names['Richard'] #del文は引数に指定した項目を削除する。
print "checkpoint 3"
for name in Names: print name, Names[name]
L = Names.keys()#keysメソッドはキーのリストの取得
M = Names.values()#valuesは値のリストの取得
print 'The datatypes of L and M are %s and %s ' % (type(L),type(M)) 
print "checkpoint 4"
for name in Names: print name, Names[name]
b = 'Wolfgang' in Names
print "checkpoint 5"
for name in Names: print name, Names[name]
print 'b :%s'%b
Names['3.141592'] = 'pi'
Names[L] = 'list_L'
for name in Names: print name, Names[name]
#coding:utf-8
import numpy

a = numpy.array([[1, 2, 3], [4, 5, 6]])
print 'a:'
print a
print a.shape
print 'a[0,0] %d' %a[0,0]
print 'a[1,0] %d' %a[1,0]
print 'a[0,1] %d' %a[0,1]
print 'a[1,1] %d' %a[1,1]
print 'a[0,2] %d' %a[0,2]
print 'a[1,2] %d' %a[1,2]
b = numpy.array([[1, 2], [3, 4], [5, 6]])
print 'b:'
print b 
c = numpy.dot(a, b) #dotは二つの行列の内積。
print 'c:'
print c
d = numpy.dot(b, a)
print 'd:'
print d
e = d * 2
print 'e:'
print e
f = numpy.diag(c)
print 'f:'
print f
g = numpy.diag(c).sum()
print 'g:'
print gimport pylab, math

def V(x):
    pot =  x ** 2 / 2 + cubic * x ** 3 + quartic * x ** 4
    return pot

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

cubic = -0.5
quartic = 0.5
x_max = 5.0
nx = 100
dx = 2.0 * x_max / (nx - 1)
x = [i * dx for i in range(-(nx - 1) / 2, nx / 2 + 1)]
y = [V(a) for a in x]
pylab.plot(x, y,label='Anharmonic potential')

cubic = 0.0
quartic = 0.0
y = [V(a) for a in x]
pylab.title('Harmonic potential and Anharmonic potential plot(expansion around zero)')
pylab.xlabel('x')
pylab.ylabel('Potential energy')
pylab.plot(x, y, label='Harmonic potential')
pylab.legend()
pylab.axis([-4.0, 4.0, 0.0, 1.0])
pylab.savefig('Harmonic_potential_and_Anharmonic_potential_plot.png')
pylab.show()


t_l = 0.0
x_l = []
y_l = []
n = 1
delta_t_l = 0.01
while n < 11:
    del x_l [:]
    del y_l [:]
    t_l = 0.0
    while t_l <1:
        cubic = - t_l
        quartic = t_l
        x_l.append(t_l)
        y_l.append(Energy(n,cubic,quartic))
        t_l += delta_t_l
    pylab.plot(x_l, y_l, label='E_%i '%(n))
    
    n += 1
pylab.title('plot E(n) changing pertubation constant')
pylab.xlabel('pertubation constant cubic and quartic')
pylab.ylabel('E(n)')

pylab.legend()
pylab.axis([0, 0.5, -5, 40])
pylab.savefig('pertubation_interact_En_plot.png')
pylab.show()py_filenameimport math,os

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z1(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    
def Z2(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

def Z3harm(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    

n_max = 5.0
n_states = 40
cubic = -0.5
quartic = 0.5
beta = 2.0

Energies = [0.5 + i for i in range(n_states)]
grid_x = [i * 0.2 for i in range(-25, 26)]
psi = {}
for x in grid_x:
    psi[x] = [math.exp(-x ** 2 / 2.0) / math.pi ** 0.25] #ground state
    psi[x].append(math.sqrt(2.0) * x * psi[x][0]) #first excited stage
    for n in range(2, n_states): #excited state n>2
        psi[x].append(math.sqrt(2.0 / n) * x * psi[x][n - 1] - math.sqrt((n - 1.0) / n) * psi[x][n - 2])py_filename#coding:UTF-8

Names = {}
Names['Albert'] = 'Einstein'
Names['Satyendra'] = 'Bose'
Names['Richard'] = 'Feynman'
Names['Ludwig'] = 'Boltzmann'
L = [1.4,1.5]
print "checkpoint 1"
for name in Names: print name, Names[name]
a = Names.pop('Albert') #popメソッドは指定したキーに該当する要素を削除、値を返す
print "checkpoint 2"
for name in Names: print name, Names[name]
del Names['Richard'] #del文は引数に指定した項目を削除する。
print "checkpoint 3"
for name in Names: print name, Names[name]
L = Names.keys()#keysメソッドはキーのリストの取得
M = Names.values()#valuesは値のリストの取得
print 'The datatypes of L and M are %s and %s ' % (type(L),type(M)) 
print "checkpoint 4"
for name in Names: print name, Names[name]
b = 'Wolfgang' in Names
print "checkpoint 5"
for name in Names: print name, Names[name]
print 'b :%s'%b
Names['3.141592'] = 'pi'
Names[L] = 'list_L'
for name in Names: print name, Names[name]
py_filename#coding:utf-8
import numpy

a = numpy.array([[1, 2, 3], [4, 5, 6]])
print 'a:'
print a
print a.shape
print 'a[0,0] %d' %a[0,0]
print 'a[1,0] %d' %a[1,0]
print 'a[0,1] %d' %a[0,1]
print 'a[1,1] %d' %a[1,1]
print 'a[0,2] %d' %a[0,2]
print 'a[1,2] %d' %a[1,2]
b = numpy.array([[1, 2], [3, 4], [5, 6]])
print 'b:'
print b 
c = numpy.dot(a, b) #dotは二つの行列の内積。
print 'c:'
print c
d = numpy.dot(b, a)
print 'd:'
print d
e = d * 2
print 'e:'
print e
f = numpy.diag(c)
print 'f:'
print f
g = numpy.diag(c).sum()
print 'g:'
print gpy_filenameimport pylab, math

def V(x):
    pot =  x ** 2 / 2 + cubic * x ** 3 + quartic * x ** 4
    return pot

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

cubic = -0.5
quartic = 0.5
x_max = 5.0
nx = 100
dx = 2.0 * x_max / (nx - 1)
x = [i * dx for i in range(-(nx - 1) / 2, nx / 2 + 1)]
y = [V(a) for a in x]
pylab.plot(x, y,label='Anharmonic potential')

cubic = 0.0
quartic = 0.0
y = [V(a) for a in x]
pylab.title('Harmonic potential and Anharmonic potential plot(expansion around zero)')
pylab.xlabel('x')
pylab.ylabel('Potential energy')
pylab.plot(x, y, label='Harmonic potential')
pylab.legend()
pylab.axis([-4.0, 4.0, 0.0, 1.0])
pylab.savefig('Harmonic_potential_and_Anharmonic_potential_plot.png')
pylab.show()


t_l = 0.0
x_l = []
y_l = []
n = 1
delta_t_l = 0.01
while n < 11:
    del x_l [:]
    del y_l [:]
    t_l = 0.0
    while t_l <1:
        cubic = - t_l
        quartic = t_l
        x_l.append(t_l)
        y_l.append(Energy(n,cubic,quartic))
        t_l += delta_t_l
    pylab.plot(x_l, y_l, label='E_%i '%(n))
    
    n += 1
pylab.title('plot E(n) changing pertubation constant')
pylab.xlabel('pertubation constant cubic and quartic')
pylab.ylabel('E(n)')

pylab.legend()
pylab.axis([0, 0.5, -5, 40])
pylab.savefig('pertubation_interact_En_plot.png')
pylab.show()py_Kugiriimport math,os

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z1(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    
def Z2(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

def Z3harm(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    

n_max = 5.0
n_states = 40
cubic = -0.5
quartic = 0.5
beta = 2.0

Energies = [0.5 + i for i in range(n_states)]
grid_x = [i * 0.2 for i in range(-25, 26)]
psi = {}
for x in grid_x:
    psi[x] = [math.exp(-x ** 2 / 2.0) / math.pi ** 0.25] #ground state
    psi[x].append(math.sqrt(2.0) * x * psi[x][0]) #first excited stage
    for n in range(2, n_states): #excited state n>2
        psi[x].append(math.sqrt(2.0 / n) * x * psi[x][n - 1] - math.sqrt((n - 1.0) / n) * psi[x][n - 2])py_Kugiri#coding:UTF-8

Names = {}
Names['Albert'] = 'Einstein'
Names['Satyendra'] = 'Bose'
Names['Richard'] = 'Feynman'
Names['Ludwig'] = 'Boltzmann'
L = [1.4,1.5]
print "checkpoint 1"
for name in Names: print name, Names[name]
a = Names.pop('Albert') #popメソッドは指定したキーに該当する要素を削除、値を返す
print "checkpoint 2"
for name in Names: print name, Names[name]
del Names['Richard'] #del文は引数に指定した項目を削除する。
print "checkpoint 3"
for name in Names: print name, Names[name]
L = Names.keys()#keysメソッドはキーのリストの取得
M = Names.values()#valuesは値のリストの取得
print 'The datatypes of L and M are %s and %s ' % (type(L),type(M)) 
print "checkpoint 4"
for name in Names: print name, Names[name]
b = 'Wolfgang' in Names
print "checkpoint 5"
for name in Names: print name, Names[name]
print 'b :%s'%b
Names['3.141592'] = 'pi'
Names[L] = 'list_L'
for name in Names: print name, Names[name]
py_Kugiri#coding:utf-8
import numpy

a = numpy.array([[1, 2, 3], [4, 5, 6]])
print 'a:'
print a
print a.shape
print 'a[0,0] %d' %a[0,0]
print 'a[1,0] %d' %a[1,0]
print 'a[0,1] %d' %a[0,1]
print 'a[1,1] %d' %a[1,1]
print 'a[0,2] %d' %a[0,2]
print 'a[1,2] %d' %a[1,2]
b = numpy.array([[1, 2], [3, 4], [5, 6]])
print 'b:'
print b 
c = numpy.dot(a, b) #dotは二つの行列の内積。
print 'c:'
print c
d = numpy.dot(b, a)
print 'd:'
print d
e = d * 2
print 'e:'
print e
f = numpy.diag(c)
print 'f:'
print f
g = numpy.diag(c).sum()
print 'g:'
print gpy_Kugiriimport pylab, math

def V(x):
    pot =  x ** 2 / 2 + cubic * x ** 3 + quartic * x ** 4
    return pot

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

cubic = -0.5
quartic = 0.5
x_max = 5.0
nx = 100
dx = 2.0 * x_max / (nx - 1)
x = [i * dx for i in range(-(nx - 1) / 2, nx / 2 + 1)]
y = [V(a) for a in x]
pylab.plot(x, y,label='Anharmonic potential')

cubic = 0.0
quartic = 0.0
y = [V(a) for a in x]
pylab.title('Harmonic potential and Anharmonic potential plot(expansion around zero)')
pylab.xlabel('x')
pylab.ylabel('Potential energy')
pylab.plot(x, y, label='Harmonic potential')
pylab.legend()
pylab.axis([-4.0, 4.0, 0.0, 1.0])
pylab.savefig('Harmonic_potential_and_Anharmonic_potential_plot.png')
pylab.show()


t_l = 0.0
x_l = []
y_l = []
n = 1
delta_t_l = 0.01
while n < 11:
    del x_l [:]
    del y_l [:]
    t_l = 0.0
    while t_l <1:
        cubic = - t_l
        quartic = t_l
        x_l.append(t_l)
        y_l.append(Energy(n,cubic,quartic))
        t_l += delta_t_l
    pylab.plot(x_l, y_l, label='E_%i '%(n))
    
    n += 1
pylab.title('plot E(n) changing pertubation constant')
pylab.xlabel('pertubation constant cubic and quartic')
pylab.ylabel('E(n)')

pylab.legend()
pylab.axis([0, 0.5, -5, 40])
pylab.savefig('pertubation_interact_En_plot.png')
pylab.show()py_Kugiriimport math,os

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z1(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    
def Z2(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

def Z3harm(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    

n_max = 5.0
n_states = 40
cubic = -0.5
quartic = 0.5
beta = 2.0

Energies = [0.5 + i for i in range(n_states)]
grid_x = [i * 0.2 for i in range(-25, 26)]
psi = {}
for x in grid_x:
    psi[x] = [math.exp(-x ** 2 / 2.0) / math.pi ** 0.25] #ground state
    psi[x].append(math.sqrt(2.0) * x * psi[x][0]) #first excited stage
    for n in range(2, n_states): #excited state n>2
        psi[x].append(math.sqrt(2.0 / n) * x * psi[x][n - 1] - math.sqrt((n - 1.0) / n) * psi[x][n - 2])py_Kugiri#coding:UTF-8

Names = {}
Names['Albert'] = 'Einstein'
Names['Satyendra'] = 'Bose'
Names['Richard'] = 'Feynman'
Names['Ludwig'] = 'Boltzmann'
L = [1.4,1.5]
print "checkpoint 1"
for name in Names: print name, Names[name]
a = Names.pop('Albert') #popメソッドは指定したキーに該当する要素を削除、値を返す
print "checkpoint 2"
for name in Names: print name, Names[name]
del Names['Richard'] #del文は引数に指定した項目を削除する。
print "checkpoint 3"
for name in Names: print name, Names[name]
L = Names.keys()#keysメソッドはキーのリストの取得
M = Names.values()#valuesは値のリストの取得
print 'The datatypes of L and M are %s and %s ' % (type(L),type(M)) 
print "checkpoint 4"
for name in Names: print name, Names[name]
b = 'Wolfgang' in Names
print "checkpoint 5"
for name in Names: print name, Names[name]
print 'b :%s'%b
Names['3.141592'] = 'pi'
Names[L] = 'list_L'
for name in Names: print name, Names[name]
py_Kugiri#coding:utf-8
import numpy

a = numpy.array([[1, 2, 3], [4, 5, 6]])
print 'a:'
print a
print a.shape
print 'a[0,0] %d' %a[0,0]
print 'a[1,0] %d' %a[1,0]
print 'a[0,1] %d' %a[0,1]
print 'a[1,1] %d' %a[1,1]
print 'a[0,2] %d' %a[0,2]
print 'a[1,2] %d' %a[1,2]
b = numpy.array([[1, 2], [3, 4], [5, 6]])
print 'b:'
print b 
c = numpy.dot(a, b) #dotは二つの行列の内積。
print 'c:'
print c
d = numpy.dot(b, a)
print 'd:'
print d
e = d * 2
print 'e:'
print e
f = numpy.diag(c)
print 'f:'
print f
g = numpy.diag(c).sum()
print 'g:'
print gpy_Kugiriimport pylab, math

def V(x):
    pot =  x ** 2 / 2 + cubic * x ** 3 + quartic * x ** 4
    return pot

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

cubic = -0.5
quartic = 0.5
x_max = 5.0
nx = 100
dx = 2.0 * x_max / (nx - 1)
x = [i * dx for i in range(-(nx - 1) / 2, nx / 2 + 1)]
y = [V(a) for a in x]
pylab.plot(x, y,label='Anharmonic potential')

cubic = 0.0
quartic = 0.0
y = [V(a) for a in x]
pylab.title('Harmonic potential and Anharmonic potential plot(expansion around zero)')
pylab.xlabel('x')
pylab.ylabel('Potential energy')
pylab.plot(x, y, label='Harmonic potential')
pylab.legend()
pylab.axis([-4.0, 4.0, 0.0, 1.0])
pylab.savefig('Harmonic_potential_and_Anharmonic_potential_plot.png')
pylab.show()


t_l = 0.0
x_l = []
y_l = []
n = 1
delta_t_l = 0.01
while n < 11:
    del x_l [:]
    del y_l [:]
    t_l = 0.0
    while t_l <1:
        cubic = - t_l
        quartic = t_l
        x_l.append(t_l)
        y_l.append(Energy(n,cubic,quartic))
        t_l += delta_t_l
    pylab.plot(x_l, y_l, label='E_%i '%(n))
    
    n += 1
pylab.title('plot E(n) changing pertubation constant')
pylab.xlabel('pertubation constant cubic and quartic')
pylab.ylabel('E(n)')

pylab.legend()
pylab.axis([0, 0.5, -5, 40])
pylab.savefig('pertubation_interact_En_plot.png')
pylab.show()@@@@@@@@@@@@@@@@@@@@@@@@C:\Users\俊一郎\Dropbox\Statistical Mechanics Algorithms and Computations\Week5_HW\harmonic_wavefunction.py@@@@@@@@@@@@@@@@@@@@@@@@import math,os

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z1(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    
def Z2(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

def Z3harm(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    

n_max = 5.0
n_states = 40
cubic = -0.5
quartic = 0.5
beta = 2.0

Energies = [0.5 + i for i in range(n_states)]
grid_x = [i * 0.2 for i in range(-25, 26)]
psi = {}
for x in grid_x:
    psi[x] = [math.exp(-x ** 2 / 2.0) / math.pi ** 0.25] #ground state
    psi[x].append(math.sqrt(2.0) * x * psi[x][0]) #first excited stage
    for n in range(2, n_states): #excited state n>2
        psi[x].append(math.sqrt(2.0 / n) * x * psi[x][n - 1] - math.sqrt((n - 1.0) / n) * psi[x][n - 2])@@@@@@@@@@@@@@@@@@@@@@@@C:\Users\俊一郎\Dropbox\Statistical Mechanics Algorithms and Computations\Week5_HW\Preparation1.py@@@@@@@@@@@@@@@@@@@@@@@@#coding:UTF-8

Names = {}
Names['Albert'] = 'Einstein'
Names['Satyendra'] = 'Bose'
Names['Richard'] = 'Feynman'
Names['Ludwig'] = 'Boltzmann'
L = [1.4,1.5]
print "checkpoint 1"
for name in Names: print name, Names[name]
a = Names.pop('Albert') #popメソッドは指定したキーに該当する要素を削除、値を返す
print "checkpoint 2"
for name in Names: print name, Names[name]
del Names['Richard'] #del文は引数に指定した項目を削除する。
print "checkpoint 3"
for name in Names: print name, Names[name]
L = Names.keys()#keysメソッドはキーのリストの取得
M = Names.values()#valuesは値のリストの取得
print 'The datatypes of L and M are %s and %s ' % (type(L),type(M)) 
print "checkpoint 4"
for name in Names: print name, Names[name]
b = 'Wolfgang' in Names
print "checkpoint 5"
for name in Names: print name, Names[name]
print 'b :%s'%b
Names['3.141592'] = 'pi'
Names[L] = 'list_L'
for name in Names: print name, Names[name]
@@@@@@@@@@@@@@@@@@@@@@@@C:\Users\俊一郎\Dropbox\Statistical Mechanics Algorithms and Computations\Week5_HW\Preparation2.py@@@@@@@@@@@@@@@@@@@@@@@@#coding:utf-8
import numpy

a = numpy.array([[1, 2, 3], [4, 5, 6]])
print 'a:'
print a
print a.shape
print 'a[0,0] %d' %a[0,0]
print 'a[1,0] %d' %a[1,0]
print 'a[0,1] %d' %a[0,1]
print 'a[1,1] %d' %a[1,1]
print 'a[0,2] %d' %a[0,2]
print 'a[1,2] %d' %a[1,2]
b = numpy.array([[1, 2], [3, 4], [5, 6]])
print 'b:'
print b 
c = numpy.dot(a, b) #dotは二つの行列の内積。
print 'c:'
print c
d = numpy.dot(b, a)
print 'd:'
print d
e = d * 2
print 'e:'
print e
f = numpy.diag(c)
print 'f:'
print f
g = numpy.diag(c).sum()
print 'g:'
print g@@@@@@@@@@@@@@@@@@@@@@@@C:\Users\俊一郎\Dropbox\Statistical Mechanics Algorithms and Computations\Week5_HW\Preparation3.py@@@@@@@@@@@@@@@@@@@@@@@@import pylab, math

def V(x):
    pot =  x ** 2 / 2 + cubic * x ** 3 + quartic * x ** 4
    return pot

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

cubic = -0.5
quartic = 0.5
x_max = 5.0
nx = 100
dx = 2.0 * x_max / (nx - 1)
x = [i * dx for i in range(-(nx - 1) / 2, nx / 2 + 1)]
y = [V(a) for a in x]
pylab.plot(x, y,label='Anharmonic potential')

cubic = 0.0
quartic = 0.0
y = [V(a) for a in x]
pylab.title('Harmonic potential and Anharmonic potential plot(expansion around zero)')
pylab.xlabel('x')
pylab.ylabel('Potential energy')
pylab.plot(x, y, label='Harmonic potential')
pylab.legend()
pylab.axis([-4.0, 4.0, 0.0, 1.0])
pylab.savefig('Harmonic_potential_and_Anharmonic_potential_plot.png')
pylab.show()


t_l = 0.0
x_l = []
y_l = []
n = 1
delta_t_l = 0.01
while n < 11:
    del x_l [:]
    del y_l [:]
    t_l = 0.0
    while t_l <1:
        cubic = - t_l
        quartic = t_l
        x_l.append(t_l)
        y_l.append(Energy(n,cubic,quartic))
        t_l += delta_t_l
    pylab.plot(x_l, y_l, label='E_%i '%(n))
    
    n += 1
pylab.title('plot E(n) changing pertubation constant')
pylab.xlabel('pertubation constant cubic and quartic')
pylab.ylabel('E(n)')

pylab.legend()
pylab.axis([0, 0.5, -5, 40])
pylab.savefig('pertubation_interact_En_plot.png')
pylab.show()@@@@@@@@@@@@@@@@@@@@@@@@C:\Users\俊一郎\Dropbox\Statistical Mechanics Algorithms and Computations\Week5_HW\harmonic_wavefunction.py@@@@@@@@@@@@@@@@@@@@@@@@import math,os

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z1(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    
def Z2(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

def Z3harm(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z
    

n_max = 5.0
n_states = 40
cubic = -0.5
quartic = 0.5
beta = 2.0

Energies = [0.5 + i for i in range(n_states)]
grid_x = [i * 0.2 for i in range(-25, 26)]
psi = {}
for x in grid_x:
    psi[x] = [math.exp(-x ** 2 / 2.0) / math.pi ** 0.25] #ground state
    psi[x].append(math.sqrt(2.0) * x * psi[x][0]) #first excited stage
    for n in range(2, n_states): #excited state n>2
        psi[x].append(math.sqrt(2.0 / n) * x * psi[x][n - 1] - math.sqrt((n - 1.0) / n) * psi[x][n - 2])@@@@@@@@@@@@@@@@@@@@@@@@C:\Users\俊一郎\Dropbox\Statistical Mechanics Algorithms and Computations\Week5_HW\Preparation1.py@@@@@@@@@@@@@@@@@@@@@@@@#coding:UTF-8

Names = {}
Names['Albert'] = 'Einstein'
Names['Satyendra'] = 'Bose'
Names['Richard'] = 'Feynman'
Names['Ludwig'] = 'Boltzmann'
L = [1.4,1.5]
print "checkpoint 1"
for name in Names: print name, Names[name]
a = Names.pop('Albert') #popメソッドは指定したキーに該当する要素を削除、値を返す
print "checkpoint 2"
for name in Names: print name, Names[name]
del Names['Richard'] #del文は引数に指定した項目を削除する。
print "checkpoint 3"
for name in Names: print name, Names[name]
L = Names.keys()#keysメソッドはキーのリストの取得
M = Names.values()#valuesは値のリストの取得
print 'The datatypes of L and M are %s and %s ' % (type(L),type(M)) 
print "checkpoint 4"
for name in Names: print name, Names[name]
b = 'Wolfgang' in Names
print "checkpoint 5"
for name in Names: print name, Names[name]
print 'b :%s'%b
Names['3.141592'] = 'pi'
Names[L] = 'list_L'
for name in Names: print name, Names[name]
@@@@@@@@@@@@@@@@@@@@@@@@C:\Users\俊一郎\Dropbox\Statistical Mechanics Algorithms and Computations\Week5_HW\Preparation2.py@@@@@@@@@@@@@@@@@@@@@@@@#coding:utf-8
import numpy

a = numpy.array([[1, 2, 3], [4, 5, 6]])
print 'a:'
print a
print a.shape
print 'a[0,0] %d' %a[0,0]
print 'a[1,0] %d' %a[1,0]
print 'a[0,1] %d' %a[0,1]
print 'a[1,1] %d' %a[1,1]
print 'a[0,2] %d' %a[0,2]
print 'a[1,2] %d' %a[1,2]
b = numpy.array([[1, 2], [3, 4], [5, 6]])
print 'b:'
print b 
c = numpy.dot(a, b) #dotは二つの行列の内積。
print 'c:'
print c
d = numpy.dot(b, a)
print 'd:'
print d
e = d * 2
print 'e:'
print e
f = numpy.diag(c)
print 'f:'
print f
g = numpy.diag(c).sum()
print 'g:'
print g@@@@@@@@@@@@@@@@@@@@@@@@C:\Users\俊一郎\Dropbox\Statistical Mechanics Algorithms and Computations\Week5_HW\Preparation3.py@@@@@@@@@@@@@@@@@@@@@@@@import pylab, math

def V(x):
    pot =  x ** 2 / 2 + cubic * x ** 3 + quartic * x ** 4
    return pot

def Energy(n, cubic, quartic):
    return n + 0.5 - 15.0 / 4.0 * cubic **2 * (n ** 2 + n + 11.0 / 30.0) \
         + 3.0 / 2.0 * quartic * (n ** 2 + n + 1.0 / 2.0)

def Z(cubic, quartic, beta, n_max):
    Z = sum(math.exp(-beta * Energy(n, cubic, quartic)) for n in range(n_max + 1))
    return Z

cubic = -0.5
quartic = 0.5
x_max = 5.0
nx = 100
dx = 2.0 * x_max / (nx - 1)
x = [i * dx for i in range(-(nx - 1) / 2, nx / 2 + 1)]
y = [V(a) for a in x]
pylab.plot(x, y,label='Anharmonic potential')

cubic = 0.0
quartic = 0.0
y = [V(a) for a in x]
pylab.title('Harmonic potential and Anharmonic potential plot(expansion around zero)')
pylab.xlabel('x')
pylab.ylabel('Potential energy')
pylab.plot(x, y, label='Harmonic potential')
pylab.legend()
pylab.axis([-4.0, 4.0, 0.0, 1.0])
pylab.savefig('Harmonic_potential_and_Anharmonic_potential_plot.png')
pylab.show()


t_l = 0.0
x_l = []
y_l = []
n = 1
delta_t_l = 0.01
while n < 11:
    del x_l [:]
    del y_l [:]
    t_l = 0.0
    while t_l <1:
        cubic = - t_l
        quartic = t_l
        x_l.append(t_l)
        y_l.append(Energy(n,cubic,quartic))
        t_l += delta_t_l
    pylab.plot(x_l, y_l, label='E_%i '%(n))
    
    n += 1
pylab.title('plot E(n) changing pertubation constant')
pylab.xlabel('pertubation constant cubic and quartic')
pylab.ylabel('E(n)')

pylab.legend()
pylab.axis([0, 0.5, -5, 40])
pylab.savefig('pertubation_interact_En_plot.png')
pylab.show()